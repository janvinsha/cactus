/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Hedera
 * Can perform basic tasks on a Hedera ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HederaBaseConfig
 */
export interface HederaBaseConfig {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof HederaBaseConfig
     */
    operatorId?: string;
    /**
     * 
     * @type {string}
     * @memberof HederaBaseConfig
     */
    operatorKey?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum HederaCommand {
    /**
    * A transaction that creates a Hedera account
    */
    CreateAccount = 'createAccount',
    /**
    * A transaction that transfers hbars and tokens between Hedera accounts
    */
    TransferHbars = 'transferHbars',
    /**
    * A transaction that creates a new topic recognized by the Hedera network
    */
    CreateTopic = 'createTopic',
    /**
    * A transaction that submits a topic message to the Hedera network
    */
    SubmitMessage = 'submitMessage',
    /**
    * Create a new fungible on the Hedera network
    */
    CreateToken = 'createToken',
    /**
    * Create a new Non fungible token (NFT) on the Hedera network
    */
    CreateNft = 'createNft',
    /**
    * Transfer tokens from some accounts to other accounts. The transaction must be signed by the sending account
    */
    TransferToken = 'transferToken',
    /**
    * A transaction that creates a new file on a Hedera network.
    */
    CreateFile = 'createFile'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum HederaQuery {
    /**
    * To get the state of an account
    */
    GetAccountBalance = 'getAccountBalance',
    /**
    * To get details of the account.
    */
    GetAccountInfo = 'getAccountInfo',
    /**
    * Topic info returns the following values for a topic.
    */
    GetTopicInfo = 'getTopicInfo',
    /**
    * Subscribe to a topic ID&#39;s messages from a mirror node. You will receive all messages for the specified topic or within the defined start and end time
    */
    GetTopicMessages = 'getTopicMessages',
    /**
    * To get the balance of tokens for an account, you can submit an account balance query. The account balance query will return the tokens the account holds in a list format.
    */
    GetAccountTokenBalance = 'getAccountTokenBalance',
    /**
    * Gets information about a fungible or non-fungible token instance.
    */
    GetTokenInfo = 'getTokenInfo',
    /**
    * A query to get the contents of a file
    */
    GetFileContents = 'getFileContents',
    /**
    * A query that returns the current state of a file. 
    */
    GetFileInfo = 'getFileInfo',
    /**
    * Make entity in the system, capable of sending transactions or queries, storing signatories, personal data and identifiers.
    */
    GetSmartContractBytecode = 'getSmartContractBytecode',
    /**
    * A query that returns the bytecode for a smart contract instance**.** Anyone can request the byte code of a smart contract instance on the network.
    */
    GetScheduleInfo = 'getScheduleInfo'
}

/**
 * 
 * @export
 * @interface InvokeContractV1Request
 */
export interface InvokeContractV1Request {
    /**
     * 
     * @type {any}
     * @memberof InvokeContractV1Request
     */
    contractName?: any | null;
}
/**
 * 
 * @export
 * @interface KeyPair
 */
export interface KeyPair {
    /**
     * SHA-3 ed25519 public keys of length 64 are recommended.
     * @type {string}
     * @memberof KeyPair
     */
    publicKey: string;
    /**
     * SHA-3 ed25519 private keys of length 64 are recommended.
     * @type {string}
     * @memberof KeyPair
     */
    privateKey: string;
}
/**
 * 
 * @export
 * @interface RunTransactionRequest
 */
export interface RunTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof RunTransactionRequest
     */
    commandName: string;
    /**
     * 
     * @type {HederaBaseConfig}
     * @memberof RunTransactionRequest
     */
    baseConfig?: HederaBaseConfig;
    /**
     * The list of arguments to pass in to the transaction request.
     * @type {Array<any>}
     * @memberof RunTransactionRequest
     */
    params: Array<any>;
}
/**
 * 
 * @export
 * @interface RunTransactionResponse
 */
export interface RunTransactionResponse {
    /**
     * 
     * @type {any}
     * @memberof RunTransactionResponse
     */
    transactionReceipt: any | null;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-hedera/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Executes a transaction on a Hedera ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransaction: async (runTransactionRequest?: RunTransactionRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-hedera/run-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(runTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusMetricsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrometheusMetricsV1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Executes a transaction on a Hedera ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTransaction(runTransactionRequest?: RunTransactionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runTransaction(runTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1(options?: any): AxiosPromise<string> {
            return localVarFp.getPrometheusMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Executes a transaction on a Hedera ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransaction(runTransactionRequest?: RunTransactionRequest, options?: any): AxiosPromise<RunTransactionResponse> {
            return localVarFp.runTransaction(runTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrometheusMetricsV1(options?: any) {
        return DefaultApiFp(this.configuration).getPrometheusMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Executes a transaction on a Hedera ledger
     * @param {RunTransactionRequest} [runTransactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runTransaction(runTransactionRequest?: RunTransactionRequest, options?: any) {
        return DefaultApiFp(this.configuration).runTransaction(runTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


